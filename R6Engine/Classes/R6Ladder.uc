//=============================================================================
//  Ladder.uc : invisible actor used to mark the top and bottom of a ladder
//              (navigation point)
//  Copyright 2001 Ubi Soft, Inc. All Rights Reserved.
//
//  Revision history:
//    2001/06/05 * Created by Rima Brek
//=============================================================================
class R6Ladder extends Ladder
	native
	notplaceable;

#exec OBJ LOAD FILE=..\Textures\R6Planning.utx PACKAGE=R6Planning

// 2 feb 2002 rbrek
// these actors are now autogenerated, so this class should be notplaceable. 
// this will ensure that these actors are deleted at build time and regenerated.

var()   bool     m_bIsTopOfLadder;  // set to true when this ladder actor is at the top of a ladderVolume
var()	bool	 m_bSingleFileFormationOnly;
var     bool	 bShowLog;
var     R6Ladder m_pOtherFloor;

replication
{
    reliable if (Role==ROLE_Authority)
        m_bIsTopOfLadder;
}

//used for initial detection for exiting a ladder - for animation playing purposes...
simulated function Touch(Actor other)
{
	local R6Pawn pawn;

	pawn = R6Pawn(other);

	if ((pawn == none) || !pawn.bCanClimbLadders || (pawn.controller == none))
		return;

	if(bShowLog) log(pawn$" has touched ladder actor : "$self);
    pawn.m_Ladder = self;   // this is set for R6Pawn - to have info about which ladder actor they are at...(top or bottom)

	if (pawn.physics == PHYS_Ladder)
	{         
		// if sliding, wait until pawn reaches ground...
        if(!pawn.bIsWalking && !m_bIsTopOfLadder)  
           return;

        if(pawn.m_bIsPlayer)
        {
			// when player climbs ladder:  up --> acceleration = (0,0,24000)  down --> acceleration = (0,0,-24000)
			if(pawn.m_bIsClimbingLadder)
			{
				if( ((normal(pawn.acceleration) dot normal(myLadder.climbDir) < -0.9) && !m_bIsTopOfLadder)
					|| ((normal(pawn.acceleration) dot normal(myLadder.climbDir) > 0.9) && m_bIsTopOfLadder) )
					pawn.EndClimbLadder(myLadder);  // need to use this actor at bottom of ladder to detect
			}
        }
        else // NPC
        {
			if(bShowLog) log(" pawn.m_bIsClimbingLadder ="$pawn.m_bIsClimbingLadder);
			// when NPC climbs ladder: up --> acceleration = (0,0,63) down --> acceleration = (0,0,-63)
			if(pawn.m_bIsClimbingLadder && !pawn.controller.isInState('EndClimbingLadder'))
			{
				if((pawn.acceleration.z > 30.0) && m_bIsTopOfLadder)   
				{
					pawn.EndClimbLadder(myLadder);
				}
				else if((pawn.acceleration.z < 30.0) && !m_bIsTopOfLadder)
				{
					pawn.EndClimbLadder(myLadder);
				}
			}
        }              
        return;
	}
    else
    {
		if(bShowlog) log(pawn$" is not in PHYSICS_Ladder yet... for "$self);

        if(pawn.m_bIsClimbingLadder)
			return;

        // CHEAT : if we are at the top of a ladder... 
        //  the laddervolume must end where the physical ladder ends, so the laddervolume will not detect the pawn.
        // * player pawn should be facing the same direction as the ladder's lookDir.
        // * non player pawn should be facing the physical ladder
        if(m_bIsTopOfLadder)
        {			
            pawn.PotentialClimbLadder(myLadder);
        }

        if(pawn.controller.IsInState('ApproachLadder'))
			return; 

        // * if a pawn's flag m_bAutoClimbLadders is set to true, then the pawn will automatically try to 
        // climb a ladder when reaching the beginning of one...
        // * make sure that the pawn is not already climbing a ladder and simply being detected by the
        // R6Ladder actor at the other end.
        // * for automatic climbing of ladders, make sure that pawn is facing the physical ladder (does not apply for rainbow)
        if( (pawn.m_ePawnType != PAWN_Rainbow) && R6AIController(pawn.controller).CanClimbLadders( self ) )
        {
            if( (m_bIsTopOfLadder && (vector(pawn.rotation) dot myLadder.lookDir < 0))
              || (!m_bIsTopOfLadder && (vector(pawn.rotation) dot myLadder.lookDir > 0)) )
            {                		
				if(bShowLog) log(pawn$" was detected by R6Ladder, climb ladder automatically...");
				pawn.controller.nextState = pawn.controller.GetStateName();
				pawn.controller.moveTarget = self;
				R6AIController(pawn.controller).GotoState('ApproachLadder');			
            }
        }
    }
}  

event bool SuggestMovePreparation(Pawn Other)
{
	return false;
}

defaultproperties
{
     m_eDisplayFlag=DF_ShowOnlyInPlanning
     bHidden=False
     bCollideActors=True
     m_bBulletGoThrough=True
     m_bSpriteShowFlatInPlanning=True
     DrawScale=2.000000
     CollisionRadius=35.000000
     CollisionHeight=14.000000
     Texture=Texture'R6Planning.Icons.PlanIcon_Ladder'
}
